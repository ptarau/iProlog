{
  "_args": [
    [
      "tokenizer@^1.1.2",
      "C:\\Users\\spdrs_000\\Desktop\\Prolog\\JS\\src"
    ]
  ],
  "_from": "tokenizer@>=1.1.2 <2.0.0",
  "_id": "tokenizer@1.1.2",
  "_inCache": true,
  "_installable": true,
  "_location": "/tokenizer",
  "_npmUser": {
    "email": "florent.jaby@gmail.com",
    "name": "floby"
  },
  "_npmVersion": "1.2.32",
  "_phantomChildren": {},
  "_requested": {
    "name": "tokenizer",
    "raw": "tokenizer@^1.1.2",
    "rawSpec": "^1.1.2",
    "scope": null,
    "spec": ">=1.1.2 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/tokenizer/-/tokenizer-1.1.2.tgz",
  "_shasum": "0058bdc229affaed05b29333675ccf53eae34f5d",
  "_shrinkwrap": null,
  "_spec": "tokenizer@^1.1.2",
  "_where": "C:\\Users\\spdrs_000\\Desktop\\Prolog\\JS\\src",
  "author": {
    "email": "florent.jaby@gmail.com",
    "name": "Florent Jaby"
  },
  "bugs": {
    "url": "https://github.com/Floby/node-tokenizer/issues"
  },
  "dependencies": {
    "disect": "~1.1.0"
  },
  "description": "A wide purpose tokenizer for node.js which looks like a stream",
  "devDependencies": {
    "nodeunit": "~0.8.1"
  },
  "directories": {
    "lib": "lib"
  },
  "dist": {
    "shasum": "0058bdc229affaed05b29333675ccf53eae34f5d",
    "tarball": "https://registry.npmjs.org/tokenizer/-/tokenizer-1.1.2.tgz"
  },
  "engines": {
    "node": "0.10.x"
  },
  "homepage": "http://github.com/floby/node-tokenizer",
  "main": "lib/Tokenizer.js",
  "maintainers": [
    {
      "name": "floby",
      "email": "florent.jaby@gmail.com"
    }
  ],
  "name": "tokenizer",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://travis-ci.org/Floby/node-tokenizer.png)](https://travis-ci.org/Floby/node-tokenizer)\n\n# Synopsis\nA wide purpose tokenizer for JavaScript. The interface follows more or less\nthe WriteStream from [node.js](http://nodejs.org).\n\nnode-tokenizer is published on npm so you can install it with `npm install tokenizer`\n\n## How to\n\n* require the Tokenizer constructor\n\n``` javascript\nvar Tokenizer = require('tokenizer');\n```\n\n* construct one (we'll see what the callback is used for)\n\n``` javascript\nvar t = new Tokenizer(mycallback);\n``` \n\n* add rules\n\n``` javascript\nt.addRule(/^my regex$/, 'type');\n```\n\n* write or pump to it\n\n``` javascript\nt.write(data);\n// or\nstream.pipe(t);\n```\n\n* listen for new tokens\n\n``` javascript\nt.on('token', function(token, type) {\n    // do something useful\n    // type is the type of the token (specified with addRule)\n    // token is the actual matching string\n})\n// alternatively you can use the tokenizer as a readable stream.\n```\n\n* look out for the end\n\n``` javascript\nt.on('end', callback);\n```\n\nthe optional callback argument for the constructor is a function that will\nbe called for each token in order to specify a different type by returning\na string. The parameters passed to the function are token(the token that we found)\nand match, an object like this \n\n``` javascript\n{\n    regex: /whatever/ // the regex that matched the token\n    type: 'type' // the type of the token\n}\n```\n\nHave a look in the example folder\n\n## Rules\nrules are regular expressions associated with a type name.\nThe tokenizer tries to find the longest string matching one or more rules.\nWhen several rules match the same string, priority is given to the rule\nwhich was added first. (this may change)\n\nPlease note that your regular expressions should use ^ and $ in order\nto test the whole string. If these are not used, you rule will match _every_\nstring that contains what you specified, this could be the whole file!\n\n## To do\n* a lot of optimisation\n* being able to share rules across several tokenizers\n    (although this can be achieved through inheritance)\n* probably more hooks\n* more checking\n\n## License\n\n[MIT](http://opensource.org/licenses/MIT)\n\nCopyright (c) 2012 Florent Jaby\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/Floby/node-tokenizer.git"
  },
  "scripts": {
    "test": "nodeunit test/test-*.js"
  },
  "version": "1.1.2"
}
